// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BULLETSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_
#define FLATBUFFERS_GENERATED_BULLETSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace fbs_bandai_siv_game_bin_input {

struct bullet;
struct bulletBuilder;

struct bullets_type;
struct bullets_typeBuilder;

struct bullet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef bulletBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BULLET_TYPE = 4,
    VT_NAME = 6,
    VT_SPEED = 8,
    VT_COLOR0 = 10,
    VT_COLOR1 = 12,
    VT_COLOR2 = 14,
    VT_SCALE = 16,
    VT_BULLET_BOOM_WORDS_TYPE = 18
  };
  const flatbuffers::String *bullet_type() const {
    return GetPointer<const flatbuffers::String *>(VT_BULLET_TYPE);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t speed() const {
    return GetField<int16_t>(VT_SPEED, 10);
  }
  float color0() const {
    return GetField<float>(VT_COLOR0, 0.0f);
  }
  float color1() const {
    return GetField<float>(VT_COLOR1, 0.0f);
  }
  float color2() const {
    return GetField<float>(VT_COLOR2, 0.6f);
  }
  float scale() const {
    return GetField<float>(VT_SCALE, 0.3f);
  }
  const flatbuffers::String *bullet_boom_words_type() const {
    return GetPointer<const flatbuffers::String *>(VT_BULLET_BOOM_WORDS_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BULLET_TYPE) &&
           verifier.VerifyString(bullet_type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_SPEED, 2) &&
           VerifyField<float>(verifier, VT_COLOR0, 4) &&
           VerifyField<float>(verifier, VT_COLOR1, 4) &&
           VerifyField<float>(verifier, VT_COLOR2, 4) &&
           VerifyField<float>(verifier, VT_SCALE, 4) &&
           VerifyOffset(verifier, VT_BULLET_BOOM_WORDS_TYPE) &&
           verifier.VerifyString(bullet_boom_words_type()) &&
           verifier.EndTable();
  }
};

struct bulletBuilder {
  typedef bullet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bullet_type(flatbuffers::Offset<flatbuffers::String> bullet_type) {
    fbb_.AddOffset(bullet::VT_BULLET_TYPE, bullet_type);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(bullet::VT_NAME, name);
  }
  void add_speed(int16_t speed) {
    fbb_.AddElement<int16_t>(bullet::VT_SPEED, speed, 10);
  }
  void add_color0(float color0) {
    fbb_.AddElement<float>(bullet::VT_COLOR0, color0, 0.0f);
  }
  void add_color1(float color1) {
    fbb_.AddElement<float>(bullet::VT_COLOR1, color1, 0.0f);
  }
  void add_color2(float color2) {
    fbb_.AddElement<float>(bullet::VT_COLOR2, color2, 0.6f);
  }
  void add_scale(float scale) {
    fbb_.AddElement<float>(bullet::VT_SCALE, scale, 0.3f);
  }
  void add_bullet_boom_words_type(flatbuffers::Offset<flatbuffers::String> bullet_boom_words_type) {
    fbb_.AddOffset(bullet::VT_BULLET_BOOM_WORDS_TYPE, bullet_boom_words_type);
  }
  explicit bulletBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<bullet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<bullet>(end);
    return o;
  }
};

inline flatbuffers::Offset<bullet> Createbullet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> bullet_type = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t speed = 10,
    float color0 = 0.0f,
    float color1 = 0.0f,
    float color2 = 0.6f,
    float scale = 0.3f,
    flatbuffers::Offset<flatbuffers::String> bullet_boom_words_type = 0) {
  bulletBuilder builder_(_fbb);
  builder_.add_bullet_boom_words_type(bullet_boom_words_type);
  builder_.add_scale(scale);
  builder_.add_color2(color2);
  builder_.add_color1(color1);
  builder_.add_color0(color0);
  builder_.add_name(name);
  builder_.add_bullet_type(bullet_type);
  builder_.add_speed(speed);
  return builder_.Finish();
}

inline flatbuffers::Offset<bullet> CreatebulletDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *bullet_type = nullptr,
    const char *name = nullptr,
    int16_t speed = 10,
    float color0 = 0.0f,
    float color1 = 0.0f,
    float color2 = 0.6f,
    float scale = 0.3f,
    const char *bullet_boom_words_type = nullptr) {
  auto bullet_type__ = bullet_type ? _fbb.CreateString(bullet_type) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto bullet_boom_words_type__ = bullet_boom_words_type ? _fbb.CreateString(bullet_boom_words_type) : 0;
  return fbs_bandai_siv_game_bin_input::Createbullet(
      _fbb,
      bullet_type__,
      name__,
      speed,
      color0,
      color1,
      color2,
      scale,
      bullet_boom_words_type__);
}

struct bullets_type FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef bullets_typeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BULLETS_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>> *bullets_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>> *>(VT_BULLETS_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BULLETS_DATA) &&
           verifier.VerifyVector(bullets_data()) &&
           verifier.VerifyVectorOfTables(bullets_data()) &&
           verifier.EndTable();
  }
};

struct bullets_typeBuilder {
  typedef bullets_type Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bullets_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>>> bullets_data) {
    fbb_.AddOffset(bullets_type::VT_BULLETS_DATA, bullets_data);
  }
  explicit bullets_typeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<bullets_type> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<bullets_type>(end);
    return o;
  }
};

inline flatbuffers::Offset<bullets_type> Createbullets_type(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>>> bullets_data = 0) {
  bullets_typeBuilder builder_(_fbb);
  builder_.add_bullets_data(bullets_data);
  return builder_.Finish();
}

inline flatbuffers::Offset<bullets_type> Createbullets_typeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>> *bullets_data = nullptr) {
  auto bullets_data__ = bullets_data ? _fbb.CreateVector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullet>>(*bullets_data) : 0;
  return fbs_bandai_siv_game_bin_input::Createbullets_type(
      _fbb,
      bullets_data__);
}

inline const fbs_bandai_siv_game_bin_input::bullets_type *Getbullets_type(const void *buf) {
  return flatbuffers::GetRoot<fbs_bandai_siv_game_bin_input::bullets_type>(buf);
}

inline const fbs_bandai_siv_game_bin_input::bullets_type *GetSizePrefixedbullets_type(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs_bandai_siv_game_bin_input::bullets_type>(buf);
}

inline bool Verifybullets_typeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs_bandai_siv_game_bin_input::bullets_type>(nullptr);
}

inline bool VerifySizePrefixedbullets_typeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs_bandai_siv_game_bin_input::bullets_type>(nullptr);
}

inline void Finishbullets_typeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullets_type> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedbullets_typeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs_bandai_siv_game_bin_input::bullets_type> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs_bandai_siv_game_bin_input

#endif  // FLATBUFFERS_GENERATED_BULLETSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_
