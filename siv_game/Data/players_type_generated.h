// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_
#define FLATBUFFERS_GENERATED_PLAYERSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace fbs_bandai_siv_game_bin_input {

struct player;
struct playerBuilder;

struct players_type;
struct players_typeBuilder;

struct player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef playerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_TYPE = 4,
    VT_NAME = 6,
    VT_HP = 8,
    VT_SPEED = 10,
    VT_BULLET_NUMBER = 12,
    VT_COLOR0 = 14,
    VT_COLOR1 = 16,
    VT_COLOR2 = 18,
    VT_SCALE = 20,
    VT_PLAYER_ATTACK_WORDS_TYPE = 22,
    VT_PLAYER_HARD_ATTACK_WORDS_TYPE = 24,
    VT_PLAYER_WAS_HIT_WORDS_TYPE = 26
  };
  const flatbuffers::String *player_type() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER_TYPE);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 10);
  }
  int16_t speed() const {
    return GetField<int16_t>(VT_SPEED, 10);
  }
  int16_t bullet_number() const {
    return GetField<int16_t>(VT_BULLET_NUMBER, 10);
  }
  float color0() const {
    return GetField<float>(VT_COLOR0, 0.4f);
  }
  float color1() const {
    return GetField<float>(VT_COLOR1, 0.8f);
  }
  float color2() const {
    return GetField<float>(VT_COLOR2, 0.6f);
  }
  float scale() const {
    return GetField<float>(VT_SCALE, 1.0f);
  }
  const flatbuffers::String *player_attack_words_type() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER_ATTACK_WORDS_TYPE);
  }
  const flatbuffers::String *player_hard_attack_words_type() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER_HARD_ATTACK_WORDS_TYPE);
  }
  const flatbuffers::String *player_was_hit_words_type() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER_WAS_HIT_WORDS_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_TYPE) &&
           verifier.VerifyString(player_type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_HP, 2) &&
           VerifyField<int16_t>(verifier, VT_SPEED, 2) &&
           VerifyField<int16_t>(verifier, VT_BULLET_NUMBER, 2) &&
           VerifyField<float>(verifier, VT_COLOR0, 4) &&
           VerifyField<float>(verifier, VT_COLOR1, 4) &&
           VerifyField<float>(verifier, VT_COLOR2, 4) &&
           VerifyField<float>(verifier, VT_SCALE, 4) &&
           VerifyOffset(verifier, VT_PLAYER_ATTACK_WORDS_TYPE) &&
           verifier.VerifyString(player_attack_words_type()) &&
           VerifyOffset(verifier, VT_PLAYER_HARD_ATTACK_WORDS_TYPE) &&
           verifier.VerifyString(player_hard_attack_words_type()) &&
           VerifyOffset(verifier, VT_PLAYER_WAS_HIT_WORDS_TYPE) &&
           verifier.VerifyString(player_was_hit_words_type()) &&
           verifier.EndTable();
  }
};

struct playerBuilder {
  typedef player Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_type(flatbuffers::Offset<flatbuffers::String> player_type) {
    fbb_.AddOffset(player::VT_PLAYER_TYPE, player_type);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(player::VT_NAME, name);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(player::VT_HP, hp, 10);
  }
  void add_speed(int16_t speed) {
    fbb_.AddElement<int16_t>(player::VT_SPEED, speed, 10);
  }
  void add_bullet_number(int16_t bullet_number) {
    fbb_.AddElement<int16_t>(player::VT_BULLET_NUMBER, bullet_number, 10);
  }
  void add_color0(float color0) {
    fbb_.AddElement<float>(player::VT_COLOR0, color0, 0.4f);
  }
  void add_color1(float color1) {
    fbb_.AddElement<float>(player::VT_COLOR1, color1, 0.8f);
  }
  void add_color2(float color2) {
    fbb_.AddElement<float>(player::VT_COLOR2, color2, 0.6f);
  }
  void add_scale(float scale) {
    fbb_.AddElement<float>(player::VT_SCALE, scale, 1.0f);
  }
  void add_player_attack_words_type(flatbuffers::Offset<flatbuffers::String> player_attack_words_type) {
    fbb_.AddOffset(player::VT_PLAYER_ATTACK_WORDS_TYPE, player_attack_words_type);
  }
  void add_player_hard_attack_words_type(flatbuffers::Offset<flatbuffers::String> player_hard_attack_words_type) {
    fbb_.AddOffset(player::VT_PLAYER_HARD_ATTACK_WORDS_TYPE, player_hard_attack_words_type);
  }
  void add_player_was_hit_words_type(flatbuffers::Offset<flatbuffers::String> player_was_hit_words_type) {
    fbb_.AddOffset(player::VT_PLAYER_WAS_HIT_WORDS_TYPE, player_was_hit_words_type);
  }
  explicit playerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<player>(end);
    return o;
  }
};

inline flatbuffers::Offset<player> Createplayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> player_type = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t hp = 10,
    int16_t speed = 10,
    int16_t bullet_number = 10,
    float color0 = 0.4f,
    float color1 = 0.8f,
    float color2 = 0.6f,
    float scale = 1.0f,
    flatbuffers::Offset<flatbuffers::String> player_attack_words_type = 0,
    flatbuffers::Offset<flatbuffers::String> player_hard_attack_words_type = 0,
    flatbuffers::Offset<flatbuffers::String> player_was_hit_words_type = 0) {
  playerBuilder builder_(_fbb);
  builder_.add_player_was_hit_words_type(player_was_hit_words_type);
  builder_.add_player_hard_attack_words_type(player_hard_attack_words_type);
  builder_.add_player_attack_words_type(player_attack_words_type);
  builder_.add_scale(scale);
  builder_.add_color2(color2);
  builder_.add_color1(color1);
  builder_.add_color0(color0);
  builder_.add_name(name);
  builder_.add_player_type(player_type);
  builder_.add_bullet_number(bullet_number);
  builder_.add_speed(speed);
  builder_.add_hp(hp);
  return builder_.Finish();
}

inline flatbuffers::Offset<player> CreateplayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *player_type = nullptr,
    const char *name = nullptr,
    int16_t hp = 10,
    int16_t speed = 10,
    int16_t bullet_number = 10,
    float color0 = 0.4f,
    float color1 = 0.8f,
    float color2 = 0.6f,
    float scale = 1.0f,
    const char *player_attack_words_type = nullptr,
    const char *player_hard_attack_words_type = nullptr,
    const char *player_was_hit_words_type = nullptr) {
  auto player_type__ = player_type ? _fbb.CreateString(player_type) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto player_attack_words_type__ = player_attack_words_type ? _fbb.CreateString(player_attack_words_type) : 0;
  auto player_hard_attack_words_type__ = player_hard_attack_words_type ? _fbb.CreateString(player_hard_attack_words_type) : 0;
  auto player_was_hit_words_type__ = player_was_hit_words_type ? _fbb.CreateString(player_was_hit_words_type) : 0;
  return fbs_bandai_siv_game_bin_input::Createplayer(
      _fbb,
      player_type__,
      name__,
      hp,
      speed,
      bullet_number,
      color0,
      color1,
      color2,
      scale,
      player_attack_words_type__,
      player_hard_attack_words_type__,
      player_was_hit_words_type__);
}

struct players_type FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef players_typeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERS_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>> *players_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>> *>(VT_PLAYERS_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERS_DATA) &&
           verifier.VerifyVector(players_data()) &&
           verifier.VerifyVectorOfTables(players_data()) &&
           verifier.EndTable();
  }
};

struct players_typeBuilder {
  typedef players_type Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_players_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>>> players_data) {
    fbb_.AddOffset(players_type::VT_PLAYERS_DATA, players_data);
  }
  explicit players_typeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<players_type> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<players_type>(end);
    return o;
  }
};

inline flatbuffers::Offset<players_type> Createplayers_type(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>>> players_data = 0) {
  players_typeBuilder builder_(_fbb);
  builder_.add_players_data(players_data);
  return builder_.Finish();
}

inline flatbuffers::Offset<players_type> Createplayers_typeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>> *players_data = nullptr) {
  auto players_data__ = players_data ? _fbb.CreateVector<flatbuffers::Offset<fbs_bandai_siv_game_bin_input::player>>(*players_data) : 0;
  return fbs_bandai_siv_game_bin_input::Createplayers_type(
      _fbb,
      players_data__);
}

inline const fbs_bandai_siv_game_bin_input::players_type *Getplayers_type(const void *buf) {
  return flatbuffers::GetRoot<fbs_bandai_siv_game_bin_input::players_type>(buf);
}

inline const fbs_bandai_siv_game_bin_input::players_type *GetSizePrefixedplayers_type(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fbs_bandai_siv_game_bin_input::players_type>(buf);
}

inline bool Verifyplayers_typeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs_bandai_siv_game_bin_input::players_type>(nullptr);
}

inline bool VerifySizePrefixedplayers_typeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs_bandai_siv_game_bin_input::players_type>(nullptr);
}

inline void Finishplayers_typeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs_bandai_siv_game_bin_input::players_type> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedplayers_typeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fbs_bandai_siv_game_bin_input::players_type> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs_bandai_siv_game_bin_input

#endif  // FLATBUFFERS_GENERATED_PLAYERSTYPE_FBS_BANDAI_SIV_GAME_BIN_INPUT_H_
